from xraysource import XRaySource
from scipy.stats import norm, cauchy, rv_continuous
from numpy import sin, cos, exp
from scipy import constants

class MySource(XRaySource):
    """
    This class implements the X-Ray source we used to perform our experiment on
    Chromatically, it has only Ka1 and Ka2 radiation
    Its angular spectrum is normal, ranging from -0.0042 rads to +0.0042 rads (anything else would not match
        our waveguide's cutoff)
    """

    def __init__(self, tilt):
        super(MySource, self).__init__(tilt)

        #not much to do here
        self.stddev = 0.0033/3
        self.mean = tilt
        self.anggenerator = norm(loc=self.mean, scale=self.stddev)

        #make a pdf based on the sum-of-four-lorentzians
        ka11 = cauchy(loc=8047.837, scale=2.285)
        ka12 = cauchy(loc=8045.637, scale=3.358)
        ka21 = cauchy(loc=8027.994, scale=2.667)
        ka22 = cauchy(loc=8026.504, scale=3.571)

        #noinspection PyMethodOverriding
        class kadist(rv_continuous):
            def _pdf(self, x):
                return (0.957 * ka11.pdf(x) + 0.090 * ka12.pdf(x) + 0.334 * ka21.pdf(x) + 0.111 * ka22.pdf(x)) / 1.492
            def _cdf(self, x):
                return (0.957 * ka11.cdf(x) + 0.090 * ka12.cdf(x) + 0.334 * ka21.cdf(x) + 0.111 * ka22.cdf(x)) / 1.492
        self.egenerator = kadist()

    def get_wave(self):
        """
        This function is responsible for generating a random wavefunction and returning it.
        It will be a plane wave tilted by a certain angle and with either a Ka1 or Ka2 wavelength

        @return: A wavefunction generated by this source
        @rtype: function
        """

        #generate an energy
        energy = self.egenerator.rvs()
        wavelength = constants.h * constants.c / (constants.e * energy)
        #generate an angle
        angle = self.anggenerator.rvs()
        #make a plane wave....
        k = 2*constants.pi/wavelength
        kx = k*sin(angle)
        kz = k*cos(angle)
        planewave = lambda x,z: exp(1j*kx*x)*exp(1j*kz*z)
        return planewave

